{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["'use strict';\n\nimport flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\n\nconst timerValue = {\n    startButtonTimer: document.querySelector('[data-start]'),\n    timerDd: document.querySelector('[data-days]'),\n    timerHh: document.querySelector('[data-hours]'),\n    timerMin: document.querySelector('[data-minutes]'),\n    timerSec: document.querySelector('[data-seconds]'),\n  };\n  \n  timerValue.startButtonTimer.disabled = true;\n  let timerId = null;\n  \n  const options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n  \n    onClose(selectedDates) {\n      const currentDate = new Date();\n  \n      if (selectedDates[0] - currentDate < 0) {\n        iziToast.error({\n            title: 'Error',\n            message: 'Please choose a date in the future',\n        });\n        timerValue.startButtonTimer.disabled = true;\n    } else {\n        timerValue.startButtonTimer.disabled = false;\n    }\n      }\n    };\n  \n  function convert(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n  function addLeadingZero(value) {\n    return String(value).padStart(2, 0);\n  }\n  \n  const timer = flatpickr('#datetime-picker', options);\n\n  function TimerStart() {\n    const selectedDate = timer.selectedDates[0];\n  \n    timerId = setInterval(() => {\n      const startTime = new Date();\n      const startCountDown = selectedDate - startTime;\n      timerValue.startButtonTimer.disabled = true;\n  \n      if (startCountDown < 0) {\n        clearInterval(timerId);\n        return;\n      }\n      updateTimer(convert(startCountDown));\n    }, 1000);\n  }\n  \n  function updateTimer({ days, hours, minutes, seconds }) {\n    timerValue.timerDd.textContent = addLeadingZero(days);\n    timerValue.timerHh.textContent = addLeadingZero(hours);\n    timerValue.timerMin.textContent = addLeadingZero(minutes);\n    timerValue.timerSec.textContent = addLeadingZero(seconds);\n  }\n  \n  timerValue.startButtonTimer.addEventListener('click', TimerStart);"],"names":["timerValue","timerId","options","selectedDates","currentDate","iziToast","convert","ms","days","hours","minutes","seconds","addLeadingZero","value","timer","flatpickr","TimerStart","selectedDate","startTime","startCountDown","updateTimer"],"mappings":"+IAKA,MAAMA,EAAa,CACf,iBAAkB,SAAS,cAAc,cAAc,EACvD,QAAS,SAAS,cAAc,aAAa,EAC7C,QAAS,SAAS,cAAc,cAAc,EAC9C,SAAU,SAAS,cAAc,gBAAgB,EACjD,SAAU,SAAS,cAAc,gBAAgB,CACrD,EAEEA,EAAW,iBAAiB,SAAW,GACvC,IAAIC,EAAU,KAEd,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,MAAMC,EAAc,IAAI,KAEpBD,EAAc,GAAKC,EAAc,GACnCC,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACrB,CAAS,EACDL,EAAW,iBAAiB,SAAW,IAEvCA,EAAW,iBAAiB,SAAW,EAExC,CACP,EAEE,SAASM,EAAQC,EAAI,CAMnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,CAAC,CACnC,CAED,MAAMC,EAAQC,EAAU,mBAAoBb,CAAO,EAEnD,SAASc,GAAa,CACpB,MAAMC,EAAeH,EAAM,cAAc,GAEzCb,EAAU,YAAY,IAAM,CAC1B,MAAMiB,EAAY,IAAI,KAChBC,EAAiBF,EAAeC,EAGtC,GAFAlB,EAAW,iBAAiB,SAAW,GAEnCmB,EAAiB,EAAG,CACtB,cAAclB,CAAO,EACrB,MACD,CACDmB,EAAYd,EAAQa,CAAc,CAAC,CACpC,EAAE,GAAI,CACR,CAED,SAASC,EAAY,CAAE,KAAAZ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDX,EAAW,QAAQ,YAAcY,EAAeJ,CAAI,EACpDR,EAAW,QAAQ,YAAcY,EAAeH,CAAK,EACrDT,EAAW,SAAS,YAAcY,EAAeF,CAAO,EACxDV,EAAW,SAAS,YAAcY,EAAeD,CAAO,CACzD,CAEDX,EAAW,iBAAiB,iBAAiB,QAASgB,CAAU"}